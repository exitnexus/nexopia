<?
/* MODULE: inlineDebug.php */

/* MODULE REVISION
 * $URL$
 * $Revision$
 * $Date$
 * $Author$
 * END MODULE REVISION */

/* OVERVIEW
 * This module contains the class inlineDebug, which acts as a container for debug items
 * generated by modules within the site
 * END OVERVIEW */

/* HISTORY
 * Created Fri Jun 23 13:18:25 MDT 2006 by pdrapeau
 * END HISTORY */


/* CLASS: inlineDebug */

/* SYNOPSIS
 * This class acts as a container for inline debug messages, and anything that may
 * be used to format them
 * END SYNOPSIS */
	
/* HISTORY
 * Created Fri Jun 23 13:18:39 MDT 2006 by pdrapeau
 * END HISTORY */
class inlineDebug {
		
	/* BEGIN DEFINE PROPERTIES */
	private $debugItems;			// debug items to add to display of inline messages (ARRAY)
	public  $itemCount;				// number of debug items currently stored in the object (INT)
	/* END DEFINE PROPERTIES */

	
	/* BEGIN CONSTRUCTOR */
		
	/* SYNOPSIS
	 * This inits the inlineDebug class
	 * END SYNOPSIS */
		
	/* HISTORY
	 * Created Fri Jun 23 14:34:59 MDT 2006 by pdrapeau
	 * END HISTORY */
	function __construct () {
		
		// INIT the debug items array
		$this->itemCount = 0;
		$this->debugItems = Array();
		
		return true;
	}
	/* END CONSTRUCTOR */
	
	
	/* METHOD: itemToHtml */
		
	/* SYNOPSIS
	 * This method takes a debug item, and converts it to HTML using the itemOutput template
	 * END SYNOPSIS */
		
	/* HISTORY
	 * Created Fri Jun 23 14:44:49 MDT 2006 by pdrapeau
	 * END HISTORY */
	public function itemToHtml (
		$debugItem		// I: key of item in the debugItems array to format
	) {
		// init output template
		$template = new template('inlineDebug/itemOutput');

		// set template values
		$template->set('itemName', $this->debugItems[$debugItem]['itemName']);
		$template->set('itemData', $this->debugItems[$debugItem]['itemData']);

		// return template string	
		return $template->toString();
	}
	/* END METHOD itemToHtml */
	
	
	/* METHOD: outputItems */
		
	/* SYNOPSIS
	 * This method outputs the items by using itemsToHtml and than sends them to the browser
	 * using the debugOutput template
	 * END SYNOPSIS */
		
	/* HISTORY
	 * Created Fri Jun 23 14:45:50 MDT 2006 by pdrapeau
	 * END HISTORY */
	public function outputItems () {
		// back out quietly if there are no items to display
		if ($this->debugItems < 1)
			return true;
		
		// build an array of formatted HTML data
		$formattedItems = Array();
		foreach ($this->debugItems as $itemId => $item) {
			$formattedItems[] = $this->itemToHtml($itemId);
		}
		
		// init the output template to display all items, and return HTML string of formatted items
		$template = new template('inlineDebug/debugOutput');
		$template->set('debugItems', $formattedItems);
		return $template->toString();
	}
	/* END METHOD outputItems */
	
	/* METHOD: addItem */
		
	/* SYNOPSIS
	 * This adds an item to the object that will be displayed
	 * END SYNOPSIS */
		
	/* HISTORY
	 * Created Fri Jun 23 15:19:09 MDT 2006 by pdrapeau
	 * END HISTORY */
	public function addItem (
		$itemName,		// I: name of the item that is being added
		$itemData		// I: data of item to be added
	) {
		$newItem = Array('itemName' => $itemName, 'itemData' => $itemData);
		
		$this->debugItems[] = $newItem;
		$this->itemCount++;
		return true;
	}
	/* END METHOD addItem */
}
/* END CLASS inlineDebug */


/* END MODULE inlineDebug.php */

?>