
#
# GeneratedCodeCache is for caching code generated by templates of some form.
# It MUST be subclassed to be useful.
#
# This code is brittle for two main reasons:
# - It wasn't designed for having multiple subdirectories. This leads to the CSS and Template
#   represenations of the filename being different.
# - It wasn't designed to generate more than one file per template. This leads to us not
#   pre-loading/pre-generating the user skins.
#
# It invalidates generated code when either the source file is newer, or the library code is newer.
#

class GeneratedCodeCache
	# Gets all files in this and subdirectories
	def self.find_templates(path)
		Dir["#{path}/*"].each {|file|
			if (File.ftype(file) == 'directory')
				find_templates(file) {|inner_file|
					yield(inner_file);
				}
			else
				yield(file);
			end
		}
	end

	# Gets the age of the library files.
	def self.library_age()
		maxtime = Time.at(0);
		library.each {|file|
			time = File.stat(file).mtime;
			if (time > maxtime)
				maxtime = time;
			end
		}
		return maxtime;
	end

	def self.statfile(filename)
		begin
			return File.stat(filename);
		rescue Errno::ENOENT => e
			raise e;
		end
	end

	def self.check_valid(ruby_file, templ_file, build_time)
		gen_file_time = statfile(ruby_file).mtime;
		return ((gen_file_time > build_time) && (gen_file_time > statfile(templ_file).mtime))
	end
	
	def self.check_dependencies(ruby_file, file, lib_build_time)
		dependencies = nil;
		File.open(ruby_file, "r"){|f|
			begin
				dependencies = f.readline[0...-1];
			rescue EOFError
				return false;
			end
		}
		if (!dependencies.index('#dependencies='))
			return false;
		end
		if (dependencies.split("=").size <= 1)
			return true
		end
		dependencies.split("=")[1].split(",").each{|dependency|
			if (dependency.size > 0)
				source_file = parse_source_file(*parse_dependency(dependency))
				ruby_dep = output_file(*parse_dependency(dependency));
				$log.info "Checking dependency '#{dependency}'", :debug, :template
				if !File.exists?(ruby_dep) or !check_valid(ruby_dep, source_file, lib_build_time)
					$log.info "Failed.", :debug, :template
					return false;
				end
			end
		}
		return true;
	end
	
	def self.get_cached(*args)
		ruby_file = output_file(*args);
		$log.info("Looking for #{ruby_file}", :debug, :template);
		if File.exists?(ruby_file)
			return ruby_file
		end
		return nil
	end
	
	def self.check_cached_file(source_file, ruby_file, lib_build_time)
		if check_valid(ruby_file, source_file, lib_build_time) and check_dependencies(ruby_file, source_file, lib_build_time)
			$log.info("Found usable #{ruby_file}", :debug, :template);
			return true;
		else
			$log.info("Found old #{ruby_file}", :debug, :template);
			File.delete(ruby_file);
			return false
		end
	end
	
	def self.load_template(source_file, source_descriptor, lib_build_time)
		ruby_file = get_cached(*source_descriptor)
		return false if ruby_file.nil?
		if (check_cached_file(source_file, ruby_file, lib_build_time))
			begin
				$log.info("Requiring... #{ruby_file}", :debug, :template);
				require(ruby_file);
			rescue SyntaxError => e
				$log.info "In file: #{ruby_file}", :error;
				$log.info $!, :error;
				$log.info $!.backtrace.join("\n"), :error;
				return;
			rescue
				$log.info "In file: #{ruby_file}", :error;
				$log.info $!, :error;
				$log.info $!.backtrace.join("\n"), :error;
				return;
			end
			name = class_name(*source_descriptor);
			instantiatedClasses[source_descriptor] = Template.const_get(name);
			return true
		end
		return false
	end
	
	def self.load_templates()
		$log.info("Searching Modules for template files.", :debug, :template);
		build_time = library_age();

		site_modules() {|mod|
			source_dirs(mod).each{|dir|
				find_templates(dir) {|file|
					if(match = file.match(source_regexp))
						template_name = match[1].to_s;
						found = load_template(file, [mod, template_name], build_time);

						#preload if needed
						if($site.config.live && !found)
							begin
								instance(SiteModuleBase.directory_name(mod.name), template_name)
							rescue
								$log.info "#{SiteModuleBase.directory_name(mod.name)} - #{template_name} pre-loading failed", :error
								$log.info $!, :error
							end
						end
					end
				}
			}
		}
	end
	
end
