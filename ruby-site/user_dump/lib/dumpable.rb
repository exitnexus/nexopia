lib_require :UserDump, "user_dump_controller"

# This module is used as a mixin in all classes that we want to use with user dumps.
# Include the line 'extend Dumpable' at the begining of the class and then implement the 'user_dump' method.
module Dumpable
	
	# This method is called when a class extends Dumpable.  It registers the class name with the UserDumpController
	# so that it can be included in the list of objects to dump on the interface page.
	def self.extended(mod)
		UserDumpController.register(mod)
	end
	
	# This method needs to be implemented by each class that you want to include in a user dump.
	# It takes the userid we're dumping, at start time and end time to limit the length of the dump.
	# It must return a File object that points to the file generated by the dump.
	# Generally having str_to_file be the last line in the method is a good idea.
	def user_dump(userid, startTime = 0, endTime = Time.now())
		raise Exception.new("No user_dump method has been defined for class #{self.class.name}")
	end

	# Appends a given string to the file specified by user_dump_filename
	def self.str_to_file(filename, str)
		begin
			file = File.open($site.config.user_dump_cache + "/#{filename}", "w+") 
			file.puts str
		ensure
			file.close()
		end
		
		return file		
	end
	
	# create a zip file from a given set of images.
	def self.imgs_to_zip(filename, file_list)		
		return File.new(UserDumpController.create_zip(filename, file_list))
	end
end

